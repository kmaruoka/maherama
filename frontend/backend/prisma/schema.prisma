generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Area {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  name       String
  parentCode String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  parent     Area?    @relation("AreaHierarchy", fields: [parentCode], references: [code])
  children   Area[]   @relation("AreaHierarchy")
  shrines    Shrine[]
}

model Shrine {
  id                        Int                      @id @default(autoincrement())
  name                      String
  lat                       Float
  lng                       Float
  registered_at             DateTime                 @default(now())
  kana                      String?
  location                  String
  description               String?
  festivals                 String?
  founded                   String?
  history                   String?
  image_id                  Int?
  image_url                 String?
  image_url64               String?
  image_url128              String?
  image_url256              String?
  image_url512              String?
  image_by                  String?
  area_id                   Int?
  created_at                DateTime                 @default(now())
  updated_at                DateTime                 @updatedAt
  area                      Area?                    @relation(fields: [area_id], references: [id])
  image                     Image?                   @relation(fields: [image_id], references: [id])
  shrine_catalogs           ShrineCatalog[]
  shrine_dieties            ShrineDiety[]
  shrine_images             ShrineImage[]
  shrine_prays              ShrinePray[]
  shrine_pray_stats         ShrinePrayStats[]
  shrine_pray_stats_daily   ShrinePrayStatsDaily[]
  shrine_pray_stats_monthly ShrinePrayStatsMonthly[]
  shrine_pray_stats_weekly  ShrinePrayStatsWeekly[]
  shrine_pray_stats_yearly  ShrinePrayStatsYearly[]

  @@unique([name, location])
}

model Diety {
  id                       Int                     @id @default(autoincrement())
  name                     String
  kana                     String?
  description              String?
  registered_at            DateTime                @default(now())
  image_id                 Int?
  image_url                String?
  image_url64              String?
  image_url128             String?
  image_url256             String?
  image_url512             String?
  image_by                 String?
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  image                    Image?                  @relation(fields: [image_id], references: [id])
  diety_catalogs           DietyCatalog[]
  diety_images             DietyImage[]
  diety_prays              DietyPray[]
  diety_pray_stats         DietyPrayStats[]
  diety_pray_stats_daily   DietyPrayStatsDaily[]
  diety_pray_stats_monthly DietyPrayStatsMonthly[]
  diety_pray_stats_weekly  DietyPrayStatsWeekly[]
  diety_pray_stats_yearly  DietyPrayStatsYearly[]
  shrine_dieties           ShrineDiety[]
}

model ShrineDiety {
  shrine_id  Int
  diety_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])

  @@id([shrine_id, diety_id])
}

model Log {
  id         Int      @id @default(autoincrement())
  message    String
  type       String   @default("normal")
  logged_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id                        Int                      @id @default(autoincrement())
  name                      String
  ability_points            Int                      @default(0)
  exp                       Int                      @default(0)
  level                     Int                      @default(0)
  image_id                  Int?
  image_url                 String?
  image_url64               String?
  image_url128              String?
  image_url256              String?
  image_url512              String?
  image_by                  String?
  created_at                DateTime                 @default(now())
  updated_at                DateTime                 @updatedAt
  image                     Image?                   @relation(fields: [image_id], references: [id])
  abilityLogs               AbilityLog[]
  diety_catalogs            DietyCatalog[]
  diety_images              DietyImage[]
  diety_image_votes         DietyImageVote[]
  diety_pray_stats          DietyPrayStats[]
  diety_pray_stats_daily    DietyPrayStatsDaily[]
  diety_pray_stats_monthly  DietyPrayStatsMonthly[]
  diety_pray_stats_weekly   DietyPrayStatsWeekly[]
  diety_pray_stats_yearly   DietyPrayStatsYearly[]
  following                 Follow[]                 @relation("follows")
  followers                 Follow[]                 @relation("followedBy")
  image_votes               ImageVote[]
  shrine_applications       ShrineApplication[]
  shrine_catalogs           ShrineCatalog[]
  shrine_images             ShrineImage[]
  shrine_pray_stats         ShrinePrayStats[]
  shrine_pray_stats_daily   ShrinePrayStatsDaily[]
  shrine_pray_stats_monthly ShrinePrayStatsMonthly[]
  shrine_pray_stats_weekly  ShrinePrayStatsWeekly[]
  shrine_pray_stats_yearly  ShrinePrayStatsYearly[]
  userAbilities             UserAbility[]
  user_subscriptions        UserSubscription[]
  userTitles                UserTitle[]
}

model Follow {
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  follower     User     @relation("follows", fields: [follower_id], references: [id])
  following    User     @relation("followedBy", fields: [following_id], references: [id])

  @@id([follower_id, following_id])
}

model ShrinePray {
  id         Int      @id @default(autoincrement())
  shrine_id  Int
  user_id    Int
  prayed_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])
}

model DietyPray {
  id         Int      @id @default(autoincrement())
  diety_id   Int
  user_id    Int
  prayed_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
}

model ShrinePrayStats {
  id         Int      @id @default(autoincrement())
  rank       Int
  shrine_id  Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([shrine_id, user_id])
}

model ShrinePrayStatsMonthly {
  id         Int      @id @default(autoincrement())
  rank       Int
  shrine_id  Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([shrine_id, user_id])
}

model ShrinePrayStatsWeekly {
  id         Int      @id @default(autoincrement())
  rank       Int
  shrine_id  Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([shrine_id, user_id])
}

model ShrinePrayStatsDaily {
  id         Int      @id @default(autoincrement())
  rank       Int
  shrine_id  Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([shrine_id, user_id])
}

model ShrinePrayStatsYearly {
  id         Int      @id @default(autoincrement())
  rank       Int
  shrine_id  Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shrine     Shrine   @relation(fields: [shrine_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([shrine_id, user_id])
}

model DietyPrayStats {
  id         Int      @id @default(autoincrement())
  rank       Int
  diety_id   Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([diety_id, user_id])
}

model DietyPrayStatsMonthly {
  id         Int      @id @default(autoincrement())
  rank       Int
  diety_id   Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([diety_id, user_id])
}

model DietyPrayStatsWeekly {
  id         Int      @id @default(autoincrement())
  rank       Int
  diety_id   Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([diety_id, user_id])
}

model DietyPrayStatsDaily {
  id         Int      @id @default(autoincrement())
  rank       Int
  diety_id   Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([diety_id, user_id])
}

model DietyPrayStatsYearly {
  id         Int      @id @default(autoincrement())
  rank       Int
  diety_id   Int
  user_id    Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  diety      Diety    @relation(fields: [diety_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([diety_id, user_id])
}

model ShrineCatalog {
  user_id        Int
  shrine_id      Int
  last_prayed_at DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  cataloged_at   DateTime  @default(now())
  shrine         Shrine    @relation(fields: [shrine_id], references: [id])
  user           User      @relation(fields: [user_id], references: [id])

  @@id([user_id, shrine_id])
}

model DietyCatalog {
  user_id        Int
  diety_id       Int
  last_prayed_at DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  cataloged_at   DateTime  @default(now())
  diety          Diety     @relation(fields: [diety_id], references: [id])
  user           User      @relation(fields: [user_id], references: [id])

  @@id([user_id, diety_id])
}

model RemotePray {
  id         Int      @id @default(autoincrement())
  user_id    Int
  shrine_id  Int
  prayed_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserSubscription {
  id                     Int       @id @default(autoincrement())
  user_id                Int
  expires_at             DateTime
  created_at             DateTime  @default(now())
  stripe_subscription_id String?
  billing_cycle_start    DateTime?
  billing_cycle_end      DateTime?
  is_active              Boolean   @default(true)
  subscription_type      String
  updated_at             DateTime  @updatedAt
  user                   User      @relation(fields: [user_id], references: [id])
}

model LevelMaster {
  id             Int      @id @default(autoincrement())
  level          Int      @unique
  required_exp   Int
  pray_distance  Int
  worship_count  Int
  ability_points Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model AbilityMaster {
  id                      Int             @id @default(autoincrement())
  name                    String
  effect_type             String
  effect_value            Int
  prerequisite_ability_id Int?
  description             String
  cost                    Int
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt
  abilityLogs             AbilityLog[]
  prerequisite_ability    AbilityMaster?  @relation("Prerequisite", fields: [prerequisite_ability_id], references: [id])
  dependent_abilities     AbilityMaster[] @relation("Prerequisite")
  userAbilities           UserAbility[]
}

model UserAbility {
  id          Int           @id @default(autoincrement())
  user_id     Int
  ability_id  Int
  acquired_at DateTime      @default(now())
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  ability     AbilityMaster @relation(fields: [ability_id], references: [id])
  user        User          @relation(fields: [user_id], references: [id])

  @@unique([user_id, ability_id])
}

model AbilityLog {
  id           Int           @id @default(autoincrement())
  user_id      Int
  ability_id   Int
  points_spent Int
  acquired_at  DateTime      @default(now())
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  ability      AbilityMaster @relation(fields: [ability_id], references: [id])
  user         User          @relation(fields: [user_id], references: [id])
}

model TitleMaster {
  id             Int         @id @default(autoincrement())
  exp_reward     Int
  ability_reward Json?
  code           String      @unique
  created_at     DateTime    @default(now())
  description    String?
  name_template  String
  type           String
  updated_at     DateTime    @updatedAt
  userTitles     UserTitle[]
}

model UserTitle {
  id           Int         @id @default(autoincrement())
  user_id      Int
  title_id     Int
  awarded_at   DateTime    @default(now())
  embed_data   Json?
  is_equipped  Boolean     @default(false)
  display_name String?
  grade        Int         @default(1)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  title        TitleMaster @relation(fields: [title_id], references: [id])
  user         User        @relation(fields: [user_id], references: [id])

  @@unique([user_id, title_id, embed_data])
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String   // オリジナルURL
  url64       String?  // 64x64サイズのURL
  url128      String?  // 128x128サイズのURL
  url256      String?  // 256x256サイズのURL
  url512      String?  // 512x512サイズのURL
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  shrine_images   ShrineImage[]
  diety_images    DietyImage[]
  shrines         Shrine[]
  dieties         Diety[]
  users           User[]
}

model ShrineImage {
  id                   Int         @id @default(autoincrement())
  shrine_id            Int
  user_id              Int
  image_id             Int
  uploaded_at          DateTime    @default(now())
  voting_month         String
  is_winner            Boolean     @default(false)
  is_current_thumbnail Boolean     @default(false)
  created_at           DateTime    @default(now())
  updated_at           DateTime    @updatedAt
  votes                ImageVote[]
  shrine               Shrine      @relation(fields: [shrine_id], references: [id])
  user                 User        @relation(fields: [user_id], references: [id])
  image                Image       @relation(fields: [image_id], references: [id])
}

model DietyImage {
  id                   Int              @id @default(autoincrement())
  diety_id             Int
  user_id              Int
  image_id             Int
  uploaded_at          DateTime         @default(now())
  voting_month         String
  is_winner            Boolean          @default(false)
  is_current_thumbnail Boolean          @default(false)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  diety                Diety            @relation(fields: [diety_id], references: [id])
  user                 User             @relation(fields: [user_id], references: [id])
  image                Image            @relation(fields: [image_id], references: [id])
  votes                DietyImageVote[]
}

model ImageVote {
  id              Int         @id @default(autoincrement())
  shrine_image_id Int
  user_id         Int
  voted_at        DateTime    @default(now())
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  shrine_image    ShrineImage @relation(fields: [shrine_image_id], references: [id])
  user            User        @relation(fields: [user_id], references: [id])

  @@unique([shrine_image_id, user_id])
}

model DietyImageVote {
  id             Int        @id @default(autoincrement())
  diety_image_id Int
  user_id        Int
  voted_at       DateTime   @default(now())
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  diety_image    DietyImage @relation(fields: [diety_image_id], references: [id])
  user           User       @relation(fields: [user_id], references: [id])

  @@unique([diety_image_id, user_id])
}

model VotingSettings {
  id                 Int      @id @default(autoincrement())
  voting_period_days Int      @default(20)
  review_period_days Int      @default(10)
  updated_at         DateTime @default(now())
  created_at         DateTime @default(now())
}

model ShrineApplication {
  id          Int       @id @default(autoincrement())
  user_id     Int
  name        String
  kana        String?
  location    String
  lat         Float
  lng         Float
  founded     String?
  history     String?
  festivals   String?
  description String?
  status      String    @default("pending")
  applied_at  DateTime  @default(now())
  reviewed_at DateTime?
  reviewed_by String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])
}
